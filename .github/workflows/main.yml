name: Pipeline
run-name: Build and deploy
on: [push]
env:
  ARTIFACTORY_URL: found.jfrog.io
  DOCKER_REPO_NAME: docker
  NAME_SPACE: foundation-production
  IMAGE_PULL_SECRET: artifactory-image-pull-secret

jobs:
  npm-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out the repo
        uses: actions/checkout@v3

      - name: Installing the node 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Running the npm intall
        run: npm ci

      - name: Compile the application
        run: npm run build --if-present

      - name: Running the linting
        run: npm run lint
      
      - name: Running unit tests & generating coverage report
        run: npm test & npm run test:cov --if-present

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Changing project from default to foundation quality gate
        run: curl -u '${{ secrets.SONAR_TOKEN }}:' -X POST "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/select?gateName=Foundation&projectKey=${{ github.event.repository.name }}"

      - name: Changing project from default to foundation quality profile
        run: curl -u '${{ secrets.SONAR_TOKEN }}:' -X POST "${{ secrets.SONAR_HOST_URL }}/api/qualityprofiles/add_project?language=ts&project=${{ github.event.repository.name }}&qualityProfile=Foundation"

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker:
    needs: npm-build
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 
       
      - name: Login to Jfrog Artifactory
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ARTIFACTORY_URL }}
          username: ${{ secrets.JF_USERNAME }}
          password: ${{ secrets.JF_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.ARTIFACTORY_URL }}/${{env.DOCKER_REPO_NAME}}/${{ github.event.repository.name }}:${{ github.sha }}
         
 
  deployment:
    needs: [npm-build, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Installing Kubectl 
        uses: azure/setup-kubectl@v2.0
        with:
          version: v1.24.6
        id: install
        
      - name: Set the kube context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.KUBE_CONFIG}}
          context: foundation-production-admin
        id: setcontext
        
      - name: Creating image pull secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: ${{ env.NAME_SPACE }}
          container-registry-url: ${{ env.ARTIFACTORY_URL }}
          container-registry-username: ${{ secrets.JF_USERNAME }}
          container-registry-password: ${{ secrets.JF_PASSWORD }}
          secret-name: ${{ env.IMAGE_PULL_SECRET }}
        id: create-secret
        
      - name: Checkout the repo
        uses: actions/checkout@v3
        
      - name: Using helm to render the templates
        uses: azure/k8s-bake@v2.2
        with:
          renderEngine: 'helm'
          helmChart: './helm/'
          overrides: |
            replicas:3
            name:hello-world
            app:hello-world
            artifactoryUrl:${{ env.ARTIFACTORY_URL }}
            dockerRepository:${{ env.DOCKER_REPO_NAME }}
            serviceName:${{ github.event.repository.name }}
            imageTag:${{ github.sha }}
            port: 8080
            tlsHostName:jb-${{ github.event.repository.name }}.eastus.cloudapp.azure.com
            tlsSecret: tls-secret
            appVersion:1.0.0
            chart:${{ github.event.repository.name }}
            releaseName:${{ github.event.repository.name }}
            commitId:${{ github.sha }}
            gitBranch:${{ github.ref_name }}
            gitRepoName:${{ github.repository }}
            gitOrgName:${{ github.repository_owner }}
          helm-version: 'latest'
        id: bake

      - uses: Azure/k8s-deploy@v4
        with:
          namespace: 'foundation-production'
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
              ${{ env.ARTIFACTORY_URL }}/${{env.DOCKER_REPO_NAME}}/${{ github.event.repository.name }}:${{ github.sha }}
          imagepullsecrets: |
              ${{ env.IMAGE_PULL_SECRET  }}

      # - name: Deploy to Kubernetes cluster 
      #   uses: Azure/k8s-deploy@v4
      #   with:
      #    namespace: 'foundation-production'
      #    manifests: |
      #      deployment/deployment.yaml
      #      deployment/service.yaml
      #    images: '${{ env.ARTIFACTORY_URL }}/${{env.DOCKER_REPO_NAME}}/${{ github.event.repository.name }}:${{ github.sha }}'
      #    imagepullsecrets: |
      #      ${{ env.IMAGE_PULL_SECRET  }}
      #    strategy: canary
      #    action: deploy
      #    percentage: 30
